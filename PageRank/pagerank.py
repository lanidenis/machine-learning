import numpy as np
import matplotlib.pyplot as plt

N = 12
H = np.zeros((N,N))


web = [ #original web for G
[2,6,11,12], #what node 1 points to
[5,3,4],
[5,2,4],
[10,2,3,5],
[3,4,6,2],
[8,9,7,1],
[8,2,6,9],
[9,6,7,10],
[6,7,8,10],
[6],
[1],
[1], #what node 12 points to
]

""" """
#web = [ #altered web for G'
#[2,6,11,12], #what node 1 points to
#[5,3,4],
#[5,2,4],
#[10,2,3,5],
#[3,4,6,2],
#[8,9,7,1],
#[8,2,6,9],
#[9,6,7,10],
#[6,7,8,10],
#[2],
#[1],
#[1], #what node 12 points to
#]

#automatically construct H matrix from web
for i in range(N):
    length = len(web[i])
    frac = (1.0/length)
    for j in range(length):
        H[i, (web[i][j] - 1)] = frac

                #Part 1b
#print H

                #Part 1c
G = 0.85*H + 0.0125*np.ones((N,N))
#print G

#[[ 0.0125      0.225       0.0125      0.0125      0.0125      0.225
#   0.0125      0.0125      0.0125      0.0125      0.225       0.225     ]
# [ 0.0125      0.0125      0.29583333  0.29583333  0.29583333  0.0125
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.0125      0.29583333  0.0125      0.29583333  0.29583333  0.0125
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.0125      0.225       0.225       0.0125      0.225       0.0125
#   0.0125      0.0125      0.0125      0.225       0.0125      0.0125    ]
# [ 0.0125      0.225       0.225       0.225       0.0125      0.225
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.225       0.0125      0.0125      0.0125      0.0125      0.0125
#  0.225       0.225       0.225       0.0125      0.0125      0.0125    ]
# [ 0.0125      0.225       0.0125      0.0125      0.0125      0.225
#   0.0125      0.225       0.225       0.0125      0.0125      0.0125    ]
# [ 0.0125      0.0125      0.0125      0.0125      0.0125      0.225       
#   0.225       0.0125      0.225       0.225       0.0125      0.0125    ]
# [ 0.0125      0.0125      0.0125      0.0125      0.0125      0.225       
#   0.225       0.225       0.0125      0.225       0.0125      0.0125    ]
# [ 0.0125      0.0125      0.0125      0.0125      0.0125      0.8625
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.8625      0.0125      0.0125      0.0125      0.0125      0.0125
#  0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.8625      0.0125      0.0125      0.0125      0.0125      0.0125
#  0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]]

                #Part 1d
lamb, right_vectors = np.linalg.eig(G);
for i in range(N):
    lamb[i] = abs(lamb[i])

#print sorted(lamb)
#print lamb[len(lamb) - 1] #(1+0j)
#print lamb[len(lamb) - 2] #(0.636861279991+0j)

                
                #Part 2a
                
G = np.array( G ) #transform for matrix multiplication, with py3.0 '@'
pi = np.array( (1.0/N)*np.ones(N) ) #normalized inital guess for pi
#print pi

#apply G matrix over 100,000 iterations
for i in range(100000):
    pi = pi.dot(G)

#print pi

# [ 0.10580504  0.11047721  0.0796149   0.08426594  0.08426594  0.15921397
#  0.08057908  0.08057908  0.08057908  0.06465262  0.03498357  0.03498357]
  
                #Part 2b

#calculate right eigenvectors of G transpose, to get left eigenvectors of G
G_t = G.transpose()
#print G_t

lamb2, right_vectors2 = np.linalg.eig(G_t)

#find index of the largest eigenvalue (which should be very close to 1)
#print lamb2

#get right vector associated with that index
right_vector = right_vectors2[:,0]
left_vector = right_vector.transpose()

#normalize 
sum = 0.0
for i in range(N):
    sum += left_vector[i]
for i in range(N):
    left_vector[i] = left_vector[i] / sum
    
print left_vector


                #Part 2c

    
                #Part 2d
my_dict = {}
for i in range(N):
    my_dict[i + 1] = left_vector[i] #node names should start at 1 not 0
    
#print my_dict

#generate list of tuples sorted on importance values
import operator
sorted_x = sorted(my_dict.items(), key=operator.itemgetter(1))
print sorted_x

    

                #Part 3a          
#[[ 0.0125      0.225       0.0125      0.0125      0.0125      0.225
#   0.0125      0.0125      0.0125      0.0125      0.225       0.225     ]
# [ 0.0125      0.0125      0.29583333  0.29583333  0.29583333  0.0125
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.0125      0.29583333  0.0125      0.29583333  0.29583333  0.0125
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.0125      0.225       0.225       0.0125      0.225       0.0125
#   0.0125      0.0125      0.0125      0.225       0.0125      0.0125    ]
# [ 0.0125      0.225       0.225       0.225       0.0125      0.225
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.225       0.0125      0.0125      0.0125      0.0125      0.0125
#   0.225       0.225       0.225       0.0125      0.0125      0.0125    ]
# [ 0.0125      0.225       0.0125      0.0125      0.0125      0.225
#   0.0125      0.225       0.225       0.0125      0.0125      0.0125    ]
# [ 0.0125      0.0125      0.0125      0.0125      0.0125      0.225       
#    0.225      0.0125      0.225       0.225       0.0125      0.0125    ]
# [ 0.0125      0.0125      0.0125      0.0125      0.0125      0.225       
#    0.225      0.225       0.0125      0.225       0.0125      0.0125    ]
# [ 0.0125      0.8625      0.0125      0.0125      0.0125      0.0125
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.8625      0.0125      0.0125      0.0125      0.0125      0.0125
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]
# [ 0.8625      0.0125      0.0125      0.0125      0.0125      0.0125
#   0.0125      0.0125      0.0125      0.0125      0.0125      0.0125    ]]

                #Part 3b
#[ 0.08324362  0.17876423  0.11478208  0.12148756  0.12148756  0.09139701
#  0.05551629  0.05551629  0.05551629  0.06191053  0.03018927  0.03018927]

                #Part 3c

      
